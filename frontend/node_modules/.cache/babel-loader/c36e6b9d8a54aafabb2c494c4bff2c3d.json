{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jeevi\\\\ttp-team-3-master\\\\src\\\\components\\\\containers\\\\LoginFormContainer.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { authenticateUser } from \"../../thunks\";\nimport { LoginFormView } from \"../views\";\n\nclass LoginFormContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.validateUser = () => {\n      const users = this.props.username;\n      let errors = { ...this.state.errors\n      };\n      let isValidUser = false;\n      let id = 0;\n      /* for(let i=0;i<users.length;i++){\n          if(this.state.username===users[i].username&&this.state.password===users[i].password){\n           isValidUser = true;\n           this.props.history.push(`/users/${users[i].id}`);\n           break;\n         }\n       }*/\n\n      if (isValidUser) {\n        errors.username = \"Valid user\";\n      } else {\n        errors.username = \"Invalid username or password\";\n      }\n\n      this.setState({\n        id,\n        isValidUser,\n        errors\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.validateUser();\n    };\n\n    this.state = {\n      username: \"\",\n      password: \"\",\n      isValidUser: false,\n      errors: {}\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchAllUsers();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, this.state.isValidUser ? `` : this.state.errors.username), /*#__PURE__*/React.createElement(LoginFormView, {\n      username: this.state.username,\n      password: this.state.password,\n      handleSubmit: this.handleSubmit,\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapState = state => {\n  return {\n    username: state.username,\n    isLoggedIn: state.isLoggedIn\n  };\n};\n\nconst mapDispatch = dispatch => {\n  return {\n    authenticateUser: () => dispatch(authenticateUser())\n  };\n};\n\nLoginFormContainer.propTypes = {\n  allUsers: PropTypes.array.isRequired,\n  fetchAllUsers: PropTypes.func.isRequired,\n  authenticateUser: PropTypes.func.isRequired\n};\nexport default connect(mapState, mapDispatch)(LoginFormContainer);","map":{"version":3,"sources":["C:/Users/Jeevi/ttp-team-3-master/src/components/containers/LoginFormContainer.js"],"names":["React","Component","PropTypes","connect","authenticateUser","LoginFormView","LoginFormContainer","constructor","props","handleChange","e","setState","target","name","value","validateUser","users","username","errors","state","isValidUser","id","handleSubmit","preventDefault","password","componentDidMount","fetchAllUsers","render","mapState","isLoggedIn","mapDispatch","dispatch","propTypes","allUsers","array","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { authenticateUser} from \"../../thunks\";\nimport { LoginFormView } from \"../views\";\n\nclass LoginFormContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      password: \"\",\n      isValidUser: false,\n      errors: {},\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchAllUsers();\n  }\n\n  handleChange = (e) => {\n   \n      this.setState({\n        [e.target.name]: e.target.value,\n      });\n    \n  };\n\n  validateUser = () => {\n    const users=this.props.username\n    let errors = { ...this.state.errors };\n    let isValidUser = false;\n    let id=0;\n   /* for(let i=0;i<users.length;i++){\n       if(this.state.username===users[i].username&&this.state.password===users[i].password){\n        isValidUser = true;\n        this.props.history.push(`/users/${users[i].id}`);\n        break;\n      }\n    }*/\n    if (isValidUser) {\n      errors.username = \"Valid user\";\n    }\n    else{\n      errors.username = \"Invalid username or password\";\n    }\n    this.setState({ id,isValidUser, errors });\n  };\n\n  handleSubmit = (e) => {\n     e.preventDefault();\n    this.validateUser()\n  };\n  render() {\n    return (\n      <>\n        {/* Can potentially be extracted into its own ErrorMessage component */}\n        <div className=\"text-danger\">\n        {this.state.isValidUser ?``: this.state.errors.username}\n        </div>\n        <LoginFormView\n          username={this.state.username}\n          password={this.state.password}\n          handleSubmit={this.handleSubmit}\n          handleChange={this.handleChange}\n        />\n      </>\n    );\n  }\n}\n\nconst mapState = (state) => {\n  return {\n    username: state.username,\n    isLoggedIn:state.isLoggedIn\n  };\n};\nconst mapDispatch = (dispatch) => {\n  return {\n    authenticateUser: () => dispatch(authenticateUser()),\n  };\n};\n\nLoginFormContainer.propTypes = {\n    allUsers: PropTypes.array.isRequired,\n    fetchAllUsers: PropTypes.func.isRequired,\n    authenticateUser:PropTypes.func.isRequired\n};\nexport default connect(mapState, mapDispatch)(LoginFormContainer);"]},"metadata":{},"sourceType":"module"}